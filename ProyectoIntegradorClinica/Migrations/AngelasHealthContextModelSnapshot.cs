// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolAngeSolClinicaHealthla_sHealth.DataAccess;

#nullable disable

namespace ProyectoIntegradorClinica.Migrations
{
    [DbContext(typeof(AngelasHealthContext))]
    partial class AngelasHealthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaCanceladaEntity", b =>
            {
                b.Property<int>("IdCitaCancelada")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCitaCancelada"), 1L, 1);

                b.Property<int>("CitaIdCita")
                    .HasColumnType("int");

                b.Property<int>("MotivoCitaCanceladaEntityIdMotivoCancelado")
                    .HasColumnType("int");

                b.HasKey("IdCitaCancelada");

                b.HasIndex("CitaIdCita");

                b.HasIndex("MotivoCitaCanceladaEntityIdMotivoCancelado");

                // Evitar delete cascade
                b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                    .WithMany()
                    .HasForeignKey("CitaIdCita")
                    .OnDelete(DeleteBehavior.Restrict) // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.MotivoCitaCanceladaEntity", "Motivo")
                    .WithMany()
                    .HasForeignKey("MotivoCitaCanceladaEntityIdMotivoCancelado")
                    .OnDelete(DeleteBehavior.Restrict) // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Cita");

                b.Navigation("Motivo");

                b.ToTable("CitaCancelada");
            });

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", b =>
            {
                b.Property<int>("IdCita")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"), 1L, 1);

                b.Property<int>("DoctorIdDoctor")
                    .HasColumnType("int");

                b.Property<string>("EstadoCita")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("FechaCita")
                    .HasColumnType("datetime2");

                b.Property<string>("HoraCita")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UsuarioIdUsuario")
                    .HasColumnType("int");

                b.HasKey("IdCita");

                b.HasIndex("DoctorIdDoctor");

                b.HasIndex("UsuarioIdUsuario");

                // Evitar delete cascade
                b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                    .WithMany()
                    .HasForeignKey("DoctorIdDoctor")
                    .OnDelete(DeleteBehavior.Restrict) // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", "Usuario")
                    .WithMany()
                    .HasForeignKey("UsuarioIdUsuario")
                    .OnDelete(DeleteBehavior.Restrict) // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("Usuario");

                b.ToTable("Cita");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CDPEntity", b =>
            {
                b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                    .WithMany()
                    .HasForeignKey("CitaIdCita")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Cita");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CitaAplazadaEntity", b =>
            {
                b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                    .WithMany()
                    .HasForeignKey("CitaIdCita")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.MotivoCitaAplazadaEntity", "Motivo")
                    .WithMany()
                    .HasForeignKey("MotivoIdMotivoAplazo")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Cita");

                b.Navigation("Motivo");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DevolucionPagoEntity", b =>
            {
                b.HasOne("SolClinicaHealth.DataAccess.Entities.CDPEntity", "CDP")
                    .WithMany()
                    .HasForeignKey("CDPIdCDP")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("CDP");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DoctorEntity", b =>
            {
                b.HasOne("SolClinicaHealth.DataAccess.Entities.DocumentoEntity", "Documento")
                    .WithMany()
                    .HasForeignKey("DocumentoIdDocumento")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.EspecialidadEntity", "Especialidad")
                    .WithMany()
                    .HasForeignKey("EspecialidadIdEspecialidad")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Documento");

                b.Navigation("Especialidad");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoDoctorEntity", b =>
            {
                b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                    .WithMany()
                    .HasForeignKey("DoctorIdDoctor")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoEntity", "HorarioTrabajo")
                    .WithMany()
                    .HasForeignKey("HorarioTrabajoIdHorarioTrabajo")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("HorarioTrabajo");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", b =>
            {
                b.HasOne("SolClinicaHealth.DataAccess.Entities.DocumentoEntity", "Documento")
                    .WithMany()
                    .HasForeignKey("DocumentoIdDocumento")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.TipoUsuarioEntity", "TipoUsuario")
                    .WithMany()
                    .HasForeignKey("TipoUsuarioIdTipoUsuario")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Documento");

                b.Navigation("TipoUsuario");
            });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.ValoracionesDoctorEntity", b =>
            {
                b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                    .WithMany()
                    .HasForeignKey("DoctorIdDoctor")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.HasOne("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", "Usuario")
                    .WithMany()
                    .HasForeignKey("UsuarioIdUsuario")
                    .OnDelete(DeleteBehavior.Restrict)  // Cambiado de Cascade a Restrict
                    .IsRequired();

                b.Navigation("Doctor");

                b.Navigation("Usuario");
            });


#pragma warning restore 612, 618
        }
    }
}
