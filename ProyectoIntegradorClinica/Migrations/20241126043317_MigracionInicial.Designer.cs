// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SolAngeSolClinicaHealthla_sHealth.DataAccess;

#nullable disable

namespace ProyectoIntegradorClinica.Migrations
{
    [DbContext(typeof(AngelasHealthContext))]
    [Migration("20241126043317_MigracionInicial")]
    partial class MigracionInicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaCanceladaEntity", b =>
                {
                    b.Property<int>("IdCitaCancelada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCitaCancelada"), 1L, 1);

                    b.Property<int>("CitaIdCita")
                        .HasColumnType("int");

                    b.Property<int>("MotivoCitaCanceladaEntityIdMotivoCancelado")
                        .HasColumnType("int");

                    b.HasKey("IdCitaCancelada");

                    b.HasIndex("CitaIdCita");

                    b.HasIndex("MotivoCitaCanceladaEntityIdMotivoCancelado");

                    b.ToTable("CitaCancelada");
                });

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", b =>
                {
                    b.Property<int>("IdCita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCita"), 1L, 1);

                    b.Property<int>("DoctorIdDoctor")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoraCita")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdCita");

                    b.HasIndex("DoctorIdDoctor");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("Cita");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CDPEntity", b =>
                {
                    b.Property<int>("IdCDP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCDP"), 1L, 1);

                    b.Property<int>("CitaIdCita")
                        .HasColumnType("int");

                    b.Property<string>("EstadoCDP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroFactura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroTarjeta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrecioCita")
                        .HasColumnType("float");

                    b.Property<string>("TipoCDP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCDP");

                    b.HasIndex("CitaIdCita");

                    b.ToTable("CDP");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CitaAplazadaEntity", b =>
                {
                    b.Property<int>("IdCitaAplazada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCitaAplazada"), 1L, 1);

                    b.Property<int>("CitaIdCita")
                        .HasColumnType("int");

                    b.Property<int>("MotivoIdMotivoAplazo")
                        .HasColumnType("int");

                    b.HasKey("IdCitaAplazada");

                    b.HasIndex("CitaIdCita");

                    b.HasIndex("MotivoIdMotivoAplazo");

                    b.ToTable("CitaAplazada");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DevolucionPagoEntity", b =>
                {
                    b.Property<int>("IdDevolcuionPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDevolcuionPago"), 1L, 1);

                    b.Property<int>("CDPIdCDP")
                        .HasColumnType("int");

                    b.Property<string>("EstadoDevolucion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDevolcuionPago");

                    b.HasIndex("CDPIdCDP");

                    b.ToTable("DevolucionPago");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DoctorEntity", b =>
                {
                    b.Property<int>("IdDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoctor"), 1L, 1);

                    b.Property<string>("ApellidoDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelularDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescripcionDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DireccionDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentoIdDocumento")
                        .HasColumnType("int");

                    b.Property<int>("EspecialidadIdEspecialidad")
                        .HasColumnType("int");

                    b.Property<string>("EstudiosDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacDoctor")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneroDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroDocumentoDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitulosDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDoctor");

                    b.HasIndex("DocumentoIdDocumento");

                    b.HasIndex("EspecialidadIdEspecialidad");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DocumentoEntity", b =>
                {
                    b.Property<int>("IdDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumento"), 1L, 1);

                    b.Property<string>("NombreDocumento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDocumento");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.EspecialidadEntity", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"), 1L, 1);

                    b.Property<string>("DescripcionEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrecioConsultaEspecialidad")
                        .HasColumnType("float");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoDoctorEntity", b =>
                {
                    b.Property<int>("IdHorarioTrabajoDoctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorarioTrabajoDoctor"), 1L, 1);

                    b.Property<int>("DoctorIdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("HorarioTrabajoIdHorarioTrabajo")
                        .HasColumnType("int");

                    b.HasKey("IdHorarioTrabajoDoctor");

                    b.HasIndex("DoctorIdDoctor");

                    b.HasIndex("HorarioTrabajoIdHorarioTrabajo");

                    b.ToTable("HorarioTrabajoDoctor");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoEntity", b =>
                {
                    b.Property<int>("IdHorarioTrabajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHorarioTrabajo"), 1L, 1);

                    b.Property<DateTime>("FechaHorarioTrabajo")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoraFin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraInicio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHorarioTrabajo");

                    b.ToTable("HorarioTrabajo");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.MotivoCitaAplazadaEntity", b =>
                {
                    b.Property<int>("IdMotivoAplazo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMotivoAplazo"), 1L, 1);

                    b.Property<string>("NombreMotivoAplazo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMotivoAplazo");

                    b.ToTable("MotivoCitaAplazada");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.MotivoCitaCanceladaEntity", b =>
                {
                    b.Property<int>("IdMotivoCancelado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMotivoCancelado"), 1L, 1);

                    b.Property<string>("NombreMotivoCancelado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMotivoCancelado");

                    b.ToTable("MotivoCitaCancelada");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.TipoUsuarioEntity", b =>
                {
                    b.Property<int>("IdTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoUsuario"), 1L, 1);

                    b.Property<string>("NombreTipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTipoUsuario");

                    b.ToTable("TipoUsuario");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"), 1L, 1);

                    b.Property<string>("ApellidoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelularUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaveUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DireccionUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentoIdDocumento")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacUsuario")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneroUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroDocumentoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUsuarioIdTipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.HasIndex("DocumentoIdDocumento");

                    b.HasIndex("TipoUsuarioIdTipoUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.ValoracionesDoctorEntity", b =>
                {
                    b.Property<int>("IdValoracion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdValoracion"), 1L, 1);

                    b.Property<string>("ComentarioValoracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorIdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("NivelValoracion")
                        .HasColumnType("int");

                    b.Property<string>("TipoValoracion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioIdUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdValoracion");

                    b.HasIndex("DoctorIdDoctor");

                    b.HasIndex("UsuarioIdUsuario");

                    b.ToTable("ValoracionesDoctor");
                });

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaCanceladaEntity", b =>
                {
                    b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.MotivoCitaCanceladaEntity", "MotivoCitaCanceladaEntity")
                        .WithMany()
                        .HasForeignKey("MotivoCitaCanceladaEntityIdMotivoCancelado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("MotivoCitaCanceladaEntity");
                });

            modelBuilder.Entity("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorIdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CDPEntity", b =>
                {
                    b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.CitaAplazadaEntity", b =>
                {
                    b.HasOne("ProyectoIntegradorClinica.DataAccess.Entities.CitaEntity", "Cita")
                        .WithMany()
                        .HasForeignKey("CitaIdCita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.MotivoCitaAplazadaEntity", "Motivo")
                        .WithMany()
                        .HasForeignKey("MotivoIdMotivoAplazo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");

                    b.Navigation("Motivo");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DevolucionPagoEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.CDPEntity", "CDP")
                        .WithMany()
                        .HasForeignKey("CDPIdCDP")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CDP");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.DoctorEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.DocumentoEntity", "Documento")
                        .WithMany()
                        .HasForeignKey("DocumentoIdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.EspecialidadEntity", "Especialidad")
                        .WithMany()
                        .HasForeignKey("EspecialidadIdEspecialidad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoDoctorEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorIdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.HorarioTrabajoEntity", "HorarioTrabajo")
                        .WithMany()
                        .HasForeignKey("HorarioTrabajoIdHorarioTrabajo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("HorarioTrabajo");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.DocumentoEntity", "Documento")
                        .WithMany()
                        .HasForeignKey("DocumentoIdDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.TipoUsuarioEntity", "TipoUsuario")
                        .WithMany()
                        .HasForeignKey("TipoUsuarioIdTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Documento");

                    b.Navigation("TipoUsuario");
                });

            modelBuilder.Entity("SolClinicaHealth.DataAccess.Entities.ValoracionesDoctorEntity", b =>
                {
                    b.HasOne("SolClinicaHealth.DataAccess.Entities.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorIdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SolClinicaHealth.DataAccess.Entities.UsuarioEntity", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
